# SPDX-License-Identifier: Apache-2.0
# Copyright 2022 Google LLC
# Copyright 2013-2025 The Foundry Visionmongers Ltd

# Modified from: https://raw.githubusercontent.com/googleapis/google-cloud-cpp/main/.clang-tidy
# See: https://releases.llvm.org/10.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/list.html
---
# Configure clang-tidy for this project.

# Here is an explanation for why some of the checks are disabled:
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -modernize-avoid-c-arrays: We only use C arrays when they seem to be the
#      right tool for the job, such as `char foo[] = "hello"`. In these cases,
#      avoiding C arrays often makes the code less readable, and std::array is
#      not a drop-in replacement because it doesn't deduce the size.
#
#  -google-runtime-references: Allow usage of non-const references as
#      function parameters. Otherwise we'd have to use pointers, which
#      cpp core guidelines recommends against unless the parameter is
#      nullable: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f60-prefer-t-over-t-when-no-argument-is-a-valid-option
#
#  -cppcoreguidelines-macro-usage: Often, macros are the only way to
#      declare constants and functions, e.g. __attribute__.
#
#  -cppcoreguidelines-pro-bounds-constant-array-index: It is reasonable
#      to use [] over .at() in most of our use-cases, i.e. when the
#      index is trusted and tested. In addition, this check only works
#      for std::array and not for e.g. std::vector, so introduces
#      inconsistencies.
Checks: >
    -*,
    bugprone-*,
    google-*,
    misc-*,
    modernize-*,
    performance-*,
    portability-*,
    readability-*,
    cppcoreguidelines-*,
    -modernize-return-braced-init-list,
    -modernize-use-trailing-return-type,
    -modernize-avoid-c-arrays,
    -cppcoreguidelines-macro-usage,
    -cppcoreguidelines-pro-bounds-constant-array-index,

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"
# Scan all (non-system) headers.
HeaderFilterRegex: '.*'
# Use .clang-format for fix suggestions.
FormatStyle: file

CheckOptions:
    - { key: readability-identifier-length.IgnoredVariableNames,   value: "^ui$"     }
    - { key: readability-identifier-naming.NamespaceCase,          value: camelBack  }
    - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
    - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
    - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
    - { key: readability-identifier-naming.FunctionCase,           value: camelBack  }
    - { key: readability-identifier-naming.VariableCase,           value: camelBack  }
    - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack  }
    - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
    - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
    - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
    - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
    - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
    - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
    - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
    - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
    - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
    - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
    - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
    - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
    - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
    - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
    # Allow structs where (all) member variables are public, even if
    # the struct has member functions.
    - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic,  value: 1 }
    # Don't warn about rule of 5 for classes that just have a destructor
    # and no other special member functions. Many trivial classes in
    # OpenAssetIO define a virtual default destructor just to make them
    # polymorphic.
    - { key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor,  value: 1 }
    # Suppressions for `#include` checks.
    # * Python.h, pystate.h, pytypedefs.h, object.h, pyerrors.h,
    #   abstract.h - Python.h is the umbrella header.
    # * toml++/ - toml.h is the umbrella header.
    # * ada/ - ada.h the umbrella header.
    # * pybind11/ - pybind11.h is the umbrella header. Other headers add
    #   functionality (e.g. stl.h), but may be falsely flagged as
    #   unused.
    - { key: misc-include-cleaner.IgnoreHeaders,  value: "Python.h;pystate.h;pytypedefs.h;object.h;pyerrors.h;abstract.h;toml\\+\\+/.*;ada/.*;pybind11/.*" }
